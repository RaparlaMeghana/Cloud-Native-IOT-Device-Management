{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamal\\\\Downloads\\\\CloudNative_IoT_AnuragUniversity_Complete\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport About from './About';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState({\n    temperature: 0,\n    humidity: 0\n  });\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch('http://localhost:8000/device/latest');\n        if (!res.ok) throw new Error('Network response was not ok');\n        const json = await res.json();\n        setData(json);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch data from backend');\n        console.error(err);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 30,\n        fontFamily: 'Arial',\n        maxWidth: 900,\n        margin: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Live IoT Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Temperature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 16\n          }, this), \" \", data.temperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Humidity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 16\n          }, this), \" \", data.humidity, \" %\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"z0hqdBI/F2o4aTe7iw0m7IGiFJA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","About","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","temperature","humidity","error","setError","fetchData","res","fetch","ok","Error","json","err","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","fontFamily","maxWidth","margin","color","_c","$RefreshReg$"],"sources":["C:/Users/kamal/Downloads/CloudNative_IoT_AnuragUniversity_Complete/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport About from './About';\n\nfunction App() {\n  const [data, setData] = useState({ temperature: 0, humidity: 0 });\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch('http://localhost:8000/device/latest');\n        if (!res.ok) throw new Error('Network response was not ok');\n        const json = await res.json();\n        setData(json);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch data from backend');\n        console.error(err);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      <About />\n      <div style={{ padding: 30, fontFamily: 'Arial', maxWidth: 900, margin: 'auto' }}>\n        <h2>Live IoT Dashboard</h2>\n        {error ? (\n          <p style={{ color: 'red' }}>{error}</p>\n        ) : (\n          <>\n            <p><strong>Temperature:</strong> {data.temperature} Â°C</p>\n            <p><strong>Humidity:</strong> {data.humidity} %</p>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}